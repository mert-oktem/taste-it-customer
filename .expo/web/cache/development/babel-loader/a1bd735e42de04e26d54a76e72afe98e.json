{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/arjun/Desktop/taste-it-customer/components/screens/onboardingScreens/DeliveryInfo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport H1 from \"../../texts/H1\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nvar useStyles = makeStyles({\n  inputField: {\n    borderRadius: 20,\n    width: Dimensions.get(\"screen\").width * 0.8,\n    paddingLeft: 1,\n    marginBottom: 20\n  }\n});\nexport default function DeliveryInfo(_ref) {\n  var navigation = _ref.navigation;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(\"null\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      country = _React$useState2[0],\n      setCountry = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"null\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      province = _React$useState4[0],\n      setProvince = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"null\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      city = _React$useState6[0],\n      setCity = _React$useState6[1];\n\n  var _React$useState7 = React.useState({\n    countryName: \"\",\n    provinceName: \"\",\n    cityName: \"\",\n    address: \"\",\n    postcode: \"\",\n    instructions: \"\"\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      data = _React$useState8[0],\n      setData = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      userToken = _React$useState10[0],\n      setUserToken = _React$useState10[1];\n\n  var textInputCountryChange = function textInputCountryChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      countryName: val\n    }));\n  };\n\n  var textInputProvinceChange = function textInputProvinceChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      provinceName: val\n    }));\n  };\n\n  var textInputCityChange = function textInputCityChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      cityName: val\n    }));\n  };\n\n  var textInputAddressChange = function textInputAddressChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      address: val\n    }));\n  };\n\n  var textInputPostChange = function textInputPostChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      postcode: val\n    }));\n  };\n\n  var textInputInfoChange = function textInputInfoChange(val) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      instructions: val\n    }));\n  };\n\n  var deliveryHandle = function deliveryHandle() {\n    var token, response, res, error;\n    return _regeneratorRuntime.async(function deliveryHandle$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(data.countryName.length == 0 || data.provinceName.length == 0 || data.cityName.length == 0 || data.address.length == 0 || data.postcode.length == 0 || data.instructions.length == 0)) {\n              _context.next = 3;\n              break;\n            }\n\n            Alert.alert(\"Wrong Input!\", \"fields cannot be empty.\", [{\n              text: \"Okay\"\n            }]);\n            return _context.abrupt(\"return\");\n\n          case 3:\n            token = null;\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userToken\"));\n\n          case 7:\n            token = _context.sent;\n            setUserToken(token);\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:5000/api/customers/address\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: \"\" + token\n              },\n              body: JSON.stringify({\n                countryName: data.countryName,\n                provinceName: data.provinceName,\n                cityName: data.cityName,\n                address: data.address,\n                postcode: data.postcode,\n                instructions: data.instructions\n              })\n            }));\n\n          case 11:\n            response = _context.sent;\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 14:\n            res = _context.sent;\n\n            if (!(response.status >= 200 && response.status < 300)) {\n              _context.next = 20;\n              break;\n            }\n\n            Alert.alert(\"User delivery Info saved successfully\", \"Thank you\", [{\n              text: \"Ok\"\n            }]);\n            navigation.navigate(\"Footer\");\n            _context.next = 23;\n            break;\n\n          case 20:\n            Alert.alert(\"Invalid Input!\", \"Something went wrong, Try again\", [{\n              text: \"Okay\"\n            }]);\n            error = res;\n            throw error;\n\n          case 23:\n            _context.next = 28;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](4);\n            console.log(_context.t0);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 25]], Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, React.createElement(H1, {\n    h1Text: \"Delivery Information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, \"You say when and where\")), React.createElement(TextInput, {\n    placeholder: \"Country Name\",\n    textContentType: \"name\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputCountryChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Province Name\",\n    textContentType: \"name\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputProvinceChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"City Name\",\n    textContentType: \"name\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputCityChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Address\",\n    textContentType: \"fullStreetAddress\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputAddressChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Postcode\",\n    textContentType: \"postalCode\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputPostChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Delivery Instruction\",\n    textContentType: \"none\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputInfoChange(val);\n    },\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"Done\",\n    type: \"submit\",\n    onPress: function onPress() {\n      return deliveryHandle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  body: {\n    width: Dimensions.get(\"screen\").width * 0.8,\n    marginLeft: Dimensions.get(\"screen\").width * 0.1,\n    marginTop: Dimensions.get(\"screen\").width * 0.1\n  },\n  text: {\n    marginBottom: 20\n  },\n  textInput: {\n    height: Dimensions.get(\"screen\").width * 0.1,\n    width: Dimensions.get(\"screen\").width * 0.8,\n    backgroundColor: \"lightgray\",\n    marginLeft: Dimensions.get(\"screen\").width * 0.01,\n    marginRight: Dimensions.get(\"screen\").width * 0.01,\n    marginTop: Dimensions.get(\"screen\").width * 0.02,\n    marginBottom: Dimensions.get(\"screen\").width * 0.02,\n    fontSize: 23,\n    borderRadius: 20,\n    paddingLeft: 15\n  }\n});","map":{"version":3,"sources":["/Users/arjun/Desktop/taste-it-customer/components/screens/onboardingScreens/DeliveryInfo.js"],"names":["React","Component","NavigationContainer","H1","AsyncStorage","makeStyles","TextField","MenuItem","useStyles","inputField","borderRadius","width","Dimensions","get","paddingLeft","marginBottom","DeliveryInfo","navigation","classes","useState","country","setCountry","province","setProvince","city","setCity","countryName","provinceName","cityName","address","postcode","instructions","data","setData","userToken","setUserToken","textInputCountryChange","val","textInputProvinceChange","textInputCityChange","textInputAddressChange","textInputPostChange","textInputInfoChange","deliveryHandle","length","Alert","alert","text","token","getItem","fetch","method","headers","Accept","Authorization","body","JSON","stringify","response","json","res","status","navigate","error","console","log","styles","textInput","StyleSheet","create","marginLeft","marginTop","height","backgroundColor","marginRight","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport {\n  Text,\n  StyleSheet,\n  View,\n  ScrollView,\n  Dimensions,\n  Button,\n  TextInput,\n  Alert\n} from \"react-native\";\nimport H1 from \"../../texts/H1\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n\n// const countries = [\n//   {\n//     value: \"Canada\",\n//     label: \"Canada\",\n//   },\n//   {\n//     value: \"USA\",\n//     label: \"USA\",\n//   },\n//   {\n//     value: \"UK\",\n//     label: \"UK\",\n//   },\n// ];\n\n// const provinces = [\n//   {\n//     value: \"British Columbia\",\n//     label: \"BC\",\n//   },\n//   {\n//     value: \"Ontario\",\n//     label: \"ON\",\n//   },\n//   {\n//     value: \"Alberta\",\n//     label: \"AB\",\n//   },\n// ];\n\n// const cities = [\n//   {\n//     value: \"Vancouver\",\n//     label: \"Vancouver\",\n//   },\n//   {\n//     value: \"Burnaby\",\n//     label: \"Burnaby\",\n//   },\n//   {\n//     value: \"Surrey\",\n//     label: \"Surrey\",\n//   },\n//   {\n//     value: \"Richmond\",\n//     label: \"Richmond\",\n//   },\n// ];\n\nconst useStyles = makeStyles({\n  inputField: {\n    borderRadius: 20,\n    width: Dimensions.get(\"screen\").width * 0.8,\n    paddingLeft: 1,\n    marginBottom: 20,\n  },\n});\n\nexport default function DeliveryInfo({navigation}) {\n  const classes = useStyles();\n  const [country, setCountry] = React.useState(\"null\");\n  const [province, setProvince] = React.useState(\"null\");\n  const [city, setCity] = React.useState(\"null\");\n\n\n  // const handleChange1 = (event) => {\n  //   setCountry(event.target.value);\n  // };\n\n  // const handleChange2 = (event) => {\n  //   setProvince(event.target.value);\n  // };\n\n  // const handleChange3 = (event) => {\n  //   setCity(event.target.value);\n  // };\n  const [data, setData] = React.useState({\n    countryName: \"\",\n    provinceName: \"\",\n    cityName: \"\",\n    address: \"\",\n    postcode: \"\",\n    instructions: \"\",\n  });\n  const [userToken, setUserToken] = React.useState(null);\n  const textInputCountryChange = (val) => {\n    setData({\n      ...data,\n      countryName: val,\n    });\n  };\n  const textInputProvinceChange = (val) => {\n    setData({\n      ...data,\n      provinceName: val,\n    });\n  };\n  const textInputCityChange = (val) => {\n    setData({\n      ...data,\n      cityName: val,\n    });\n  };\n  const textInputAddressChange = (val) => {\n    setData({\n      ...data,\n      address: val,\n    });\n  };\n  const textInputPostChange = (val) => {\n    setData({\n      ...data,\n      postcode: val,\n    });\n  };\n  const textInputInfoChange = (val) => {\n    setData({\n      ...data,\n      instructions: val,\n    });\n  };\n  const deliveryHandle = async () => {\n    if (\n      data.countryName.length == 0 ||\n      data.provinceName.length == 0 ||\n      data.cityName.length == 0 ||\n      data.address.length == 0 ||\n      data.postcode.length == 0 ||\n      data.instructions.length == 0\n    ) {\n      Alert.alert(\"Wrong Input!\", \"fields cannot be empty.\", [\n        { text: \"Okay\" },\n      ]);\n      return;\n    }\n    let token = null;\n    try {\n      token = await AsyncStorage.getItem(\"userToken\");\n\n      setUserToken(token);\n      let response = await fetch(\n        \"http://localhost:5000/api/customers/address\",\n        {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `${token}`,\n          },\n          body: JSON.stringify({\n            countryName: data.countryName,\n            provinceName: data.provinceName,\n            cityName: data.cityName,\n            address: data.address,\n            postcode: data.postcode,\n          \n            instructions: data.instructions,\n          }),\n        }\n      );\n\n      const res = await response.json();\n\n      if (response.status >= 200 && response.status < 300) {\n        //Handle success\n      \n        Alert.alert(\"User delivery Info saved successfully\", \"Thank you\", [{ text: \"Ok\" }]);\n        navigation.navigate(\"Footer\")\n        \n      } else {\n        Alert.alert(\"Invalid Input!\", \"Something went wrong, Try again\", [\n          { text: \"Okay\" },\n        ]);\n        //Handle error\n        let error = res;\n        throw error;\n      }\n    } catch (error) {\n      // this.setState({error: error});\n      console.log(error);\n      // this.setState({showProgress: false});\n    }\n  };\n\n  return (\n    <ScrollView>\n      <View style={styles.body}>\n        <View style={styles.text}>\n          <H1 h1Text=\"Delivery Information\" />\n          <Text>You say when and where</Text>\n        </View>\n        <TextInput\n          placeholder={\"Country Name\"}\n          textContentType={\"name\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputCountryChange(val)}\n          style={styles.textInput}\n        />\n        <TextInput\n          placeholder={\"Province Name\"}\n          textContentType={\"name\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputProvinceChange(val)}\n          style={styles.textInput}\n        />\n        <TextInput\n          placeholder={\"City Name\"}\n          textContentType={\"name\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputCityChange(val)}\n          style={styles.textInput}\n        />\n\n        <TextInput\n          placeholder={\"Address\"}\n          textContentType={\"fullStreetAddress\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputAddressChange(val)}\n          style={styles.textInput}\n        />\n\n        <TextInput\n          placeholder={\"Postcode\"}\n          textContentType={\"postalCode\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputPostChange(val)}\n          style={styles.textInput}\n        />\n\n        <TextInput\n          placeholder={\"Delivery Instruction\"}\n          textContentType={\"none\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputInfoChange(val)}\n          style={styles.textInput}\n        />\n\n        <Button title=\"Done\" type=\"submit\" onPress={() => deliveryHandle()} />\n\n        {/* <TextField\n        id=\"select-country\"\n        select\n        label=\"Country\"\n        value={country}\n        onChange={handleChange1}\n        variant=\"outlined\"\n        InputProps={{\n          className: classes.inputField,\n        }}\n      >\n        {countries.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n\n      <TextField\n        id=\"select-province\"\n        select\n        label=\"Province\"\n        value={province}\n        onChange={handleChange2}\n        variant=\"outlined\"\n        InputProps={{\n          className: classes.inputField,\n        }}\n      >\n        {provinces.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n\n      <TextField\n        id=\"select-city\"\n        select\n        label=\"City\"\n        value={city}\n        onChange={handleChange3}\n        variant=\"outlined\"\n        InputProps={{\n          className: classes.inputField,\n        }}\n      >\n        {cities.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField> */}\n\n      </View>\n\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  body: {\n    width: Dimensions.get(\"screen\").width * 0.8,\n    // backgroundColor: \"lightgreen\",\n    marginLeft: Dimensions.get(\"screen\").width * 0.1,\n    marginTop: Dimensions.get(\"screen\").width * 0.1,\n  },\n  text: {\n    marginBottom: 20,\n  },\n  textInput: {\n    height: Dimensions.get(\"screen\").width * 0.1,\n    width: Dimensions.get(\"screen\").width * 0.8,\n    backgroundColor: \"lightgray\",\n    marginLeft: Dimensions.get(\"screen\").width * 0.01,\n    marginRight: Dimensions.get(\"screen\").width * 0.01,\n    marginTop: Dimensions.get(\"screen\").width * 0.02,\n    marginBottom: Dimensions.get(\"screen\").width * 0.02,\n    fontSize: 23,\n    borderRadius: 20,\n    paddingLeft: 15,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}