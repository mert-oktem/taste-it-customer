{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/antrix/Documents/College Term 4/Project/ReactNative/taste-it-customer/components/screens/signIn/SignIn.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { AuthContext } from \"../../Context\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Users from \"../../Users\";\nimport H1 from \"../../texts/H1\";\nimport InputField from \"../../inputFields/InputField\";\nimport ReusableBtn from \"../../buttons/ReusableBtn\";\nimport { TextInput } from \"react-native-paper\";\nexport default function SignIn(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useContext = React.useContext(AuthContext),\n      signIn = _React$useContext.signIn;\n\n  var _React$useState = React.useState({\n    username: \"\",\n    password: \"\",\n    isValidUser: true,\n    isValidPassword: true\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var textInputChange = function textInputChange(val) {\n    if (val.trim().length >= 4) {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        username: val,\n        isValidUser: true\n      }));\n    } else {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        username: val,\n        isValidUser: false\n      }));\n    }\n  };\n\n  var handlePasswordChange = function handlePasswordChange(val) {\n    if (val.trim().length >= 8) {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        password: val,\n        isValidPassword: true\n      }));\n    } else {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        password: val,\n        isValidPassword: false\n      }));\n    }\n  };\n\n  var handleValidUser = function handleValidUser(val) {\n    if (val.trim().length >= 4) {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        isValidUser: true\n      }));\n    } else {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        isValidUser: false\n      }));\n    }\n  };\n\n  var loginHandle = function loginHandle(userName, password) {\n    var foundUser = Users.filter(function (item) {\n      return userName == item.username && password == item.password;\n    });\n\n    if (data.username.length == 0 || data.password.length == 0) {\n      Alert.alert(\"Wrong Input!\", \"Username or password field cannot be empty.\", [{\n        text: \"Okay\"\n      }]);\n      return;\n    }\n\n    if (foundUser.length == 0) {\n      Alert.alert(\"Invalid User!\", \"Username or password is incorrect.\", [{\n        text: \"Okay\"\n      }]);\n      return;\n    }\n\n    signIn(foundUser);\n    Alert.alert(\"Done\", \"user logged In\", [{\n      text: \"Okay\"\n    }]);\n  };\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    style: styles.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, React.createElement(H1, {\n    h1Text: \"Welcome Aboard,\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.para1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Sign in to continue\"), React.createElement(TextInput, {\n    placeholder: \"Email\",\n    textContentType: \"emailAddress\",\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return textInputChange(val);\n    },\n    onEndEditing: function onEndEditing(e) {\n      return handleValidUser(e.nativeEvent.text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), data.isValidUser ? null : React.createElement(View, {\n    duration: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.errorMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Username must be 4 characters long.\")), React.createElement(TextInput, {\n    placeholder: \"Password\",\n    textContentType: \"password\",\n    secureTextEntry: true,\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(val) {\n      return handlePasswordChange(val);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), data.isValidPassword ? null : React.createElement(View, {\n    duration: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.errorMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"Password must be 8 characters long.\")), React.createElement(TouchableOpacity, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.forgot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Forgot password?\")), React.createElement(Button, {\n    title: \"Sign In\",\n    type: \"submit\",\n    onPress: function onPress() {\n      loginHandle(data.username, data.password);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.signUpText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.smallText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, \"Don't have an account?\"), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"SignUp\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.forgot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Sign up now\")))));\n}\nvar styles = StyleSheet.create({\n  image: {\n    height: Dimensions.get(\"screen\").width,\n    width: Dimensions.get(\"screen\").width,\n    backgroundColor: \"lightgray\"\n  },\n  body: {\n    width: Dimensions.get(\"screen\").width * 0.8,\n    marginLeft: Dimensions.get(\"screen\").width * 0.1,\n    marginTop: Dimensions.get(\"screen\").width * 0.1\n  },\n  para1: {\n    marginBottom: Dimensions.get(\"screen\").width * 0.08\n  },\n  signUpText: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: Dimensions.get(\"screen\").width * 0.04\n  },\n  smallText: {\n    fontSize: 10\n  },\n  forgot: {\n    fontSize: 10,\n    textDecorationLine: \"underline\",\n    marginBottom: Dimensions.get(\"screen\").width * 0.08\n  }\n});","map":{"version":3,"sources":["/Users/antrix/Documents/College Term 4/Project/ReactNative/taste-it-customer/components/screens/signIn/SignIn.js"],"names":["React","AuthContext","Users","H1","InputField","ReusableBtn","TextInput","SignIn","navigation","useContext","signIn","useState","username","password","isValidUser","isValidPassword","data","setData","textInputChange","val","trim","length","handlePasswordChange","handleValidUser","loginHandle","userName","foundUser","filter","item","Alert","alert","text","styles","image","body","para1","e","nativeEvent","errorMsg","forgot","signUpText","smallText","navigate","StyleSheet","create","height","Dimensions","get","width","backgroundColor","marginLeft","marginTop","marginBottom","display","flexDirection","justifyContent","fontSize","textDecorationLine"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { AuthContext } from \"../../Context\";\nimport {\n  Text,\n  ScrollView,\n  Image,\n  StyleSheet,\n  Dimensions,\n  View,\n  TouchableOpacity,\n  Button,\n  Alert\n} from \"react-native\";\nimport Users from '../../Users';\nimport H1 from \"../../texts/H1\";\nimport InputField from \"../../inputFields/InputField\";\nimport ReusableBtn from \"../../buttons/ReusableBtn\";\nimport { TextInput } from \"react-native-paper\";\n\nexport default function SignIn({ navigation }) {\n  const { signIn } = React.useContext(AuthContext);\n\n  const [data, setData] = React.useState({\n    username: \"\",\n    password: \"\",\n    // check_textInputChange: false,\n    // secureTextEntry: true,\n    isValidUser: true,\n    isValidPassword: true,\n  });\n\n  const textInputChange = (val) => {\n    if (val.trim().length >= 4) {\n      setData({\n        ...data,\n        username: val,\n        // check_textInputChange: true,\n        isValidUser: true,\n      });\n    } else {\n      setData({\n        ...data,\n        username: val,\n        // check_textInputChange: false,\n        isValidUser: false,\n      });\n    }\n  };\n\n  const handlePasswordChange = (val) => {\n    if (val.trim().length >= 8) {\n      setData({\n        ...data,\n        password: val,\n        isValidPassword: true,\n      });\n    } else {\n      setData({\n        ...data,\n        password: val,\n        isValidPassword: false,\n      });\n    }\n  };\n\n  const handleValidUser = (val) => {\n    if( val.trim().length >= 4 ) {\n        setData({\n            ...data,\n            isValidUser: true\n        });\n    } else {\n        setData({\n            ...data,\n            isValidUser: false\n        });\n    }\n}\n\n  const loginHandle = (userName, password) => {\n    const foundUser = Users.filter((item) => {\n      return userName == item.username && password == item.password;\n    });\n\n    if (data.username.length == 0 || data.password.length == 0) {\n      Alert.alert(\n        \"Wrong Input!\",\n        \"Username or password field cannot be empty.\",\n        [{ text: \"Okay\" }]\n      );\n      return;\n    }\n\n    if (foundUser.length == 0) {\n      Alert.alert(\"Invalid User!\", \"Username or password is incorrect.\", [\n        { text: \"Okay\" },\n      ]);\n      return;\n    }\n    signIn(foundUser);\n    Alert.alert(\n      \"Done\",\n      \"user logged In\",\n      [{ text: \"Okay\" }]\n    );\n    // navigation.navigate(\"WelcomeScreen2\")\n  };\n\n  return (\n    <ScrollView>\n      <Image style={styles.image} />\n      <ScrollView style={styles.body}>\n        <H1 h1Text=\"Welcome Aboard,\" />\n        <Text style={styles.para1}>Sign in to continue</Text>\n        <TextInput\n          placeholder={\"Email\"}\n          textContentType={\"emailAddress\"}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => textInputChange(val)}\n          onEndEditing={(e)=>handleValidUser(e.nativeEvent.text)}\n        />\n        {data.isValidUser ? null : (\n          <View duration={500}>\n            <Text style={styles.errorMsg}>\n              Username must be 4 characters long.\n            </Text>\n          </View>\n        )}\n        <TextInput\n          placeholder={\"Password\"}\n          textContentType={\"password\"}\n          secureTextEntry={true}\n          autoCapitalize=\"none\"\n          onChangeText={(val) => handlePasswordChange(val)}\n        />\n        {data.isValidPassword ? null : (\n          <View duration={500}>\n            <Text style={styles.errorMsg}>\n              Password must be 8 characters long.\n            </Text>\n          </View>\n        )}\n        <TouchableOpacity>\n          <Text style={styles.forgot}>Forgot password?</Text>\n        </TouchableOpacity>\n        <Button\n          title=\"Sign In\"\n          type=\"submit\"\n          onPress={() => {\n            loginHandle(data.username, data.password);\n          }}\n          // onPress={() => navigation.navigate(\"WelcomeScreen1\")}\n        />\n        <View style={styles.signUpText}>\n          <Text style={styles.smallText}>Don't have an account?</Text>\n\n          <TouchableOpacity onPress={() => navigation.navigate(\"SignUp\")}>\n            <Text style={styles.forgot}>Sign up now</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    height: Dimensions.get(\"screen\").width,\n    width: Dimensions.get(\"screen\").width,\n    backgroundColor: \"lightgray\",\n  },\n  body: {\n    width: Dimensions.get(\"screen\").width * 0.8,\n    marginLeft: Dimensions.get(\"screen\").width * 0.1,\n    marginTop: Dimensions.get(\"screen\").width * 0.1,\n  },\n  para1: {\n    marginBottom: Dimensions.get(\"screen\").width * 0.08,\n  },\n  signUpText: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: Dimensions.get(\"screen\").width * 0.04,\n  },\n  smallText: {\n    fontSize: 10,\n  },\n  forgot: {\n    fontSize: 10,\n    textDecorationLine: \"underline\",\n    marginBottom: Dimensions.get(\"screen\").width * 0.08,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}